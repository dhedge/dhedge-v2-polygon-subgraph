// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExchangeFrom extends ethereum.Event {
  get params(): ExchangeFrom__Params {
    return new ExchangeFrom__Params(this);
  }
}

export class ExchangeFrom__Params {
  _event: ExchangeFrom;

  constructor(event: ExchangeFrom) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sourceAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sourceAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dstAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ExchangeTo extends ethereum.Event {
  get params(): ExchangeTo__Params {
    return new ExchangeTo__Params(this);
  }
}

export class ExchangeTo__Params {
  _event: ExchangeTo;

  constructor(event: ExchangeTo) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sourceAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dstAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ExitPool extends ethereum.Event {
  get params(): ExitPool__Params {
    return new ExitPool__Params(this);
  }
}

export class ExitPool__Params {
  _event: ExitPool;

  constructor(event: ExitPool) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get assets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class JoinPool extends ethereum.Event {
  get params(): JoinPool__Params {
    return new JoinPool__Params(this);
  }
}

export class JoinPool__Params {
  _event: JoinPool;

  constructor(event: JoinPool) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get assets(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BalancerV2Guard__txGuardResult {
  value0: i32;
  value1: boolean;

  constructor(value0: i32, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class BalancerV2Guard extends ethereum.SmartContract {
  static bind(address: Address): BalancerV2Guard {
    return new BalancerV2Guard("BalancerV2Guard", address);
  }

  convert32toAddress(data: Bytes): Address {
    let result = super.call(
      "convert32toAddress",
      "convert32toAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(data)]
    );

    return result[0].toAddress();
  }

  try_convert32toAddress(data: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "convert32toAddress",
      "convert32toAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArrayIndex(data: Bytes, inputNum: i32, arrayIndex: i32): Bytes {
    let result = super.call(
      "getArrayIndex",
      "getArrayIndex(bytes,uint8,uint8):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(arrayIndex))
      ]
    );

    return result[0].toBytes();
  }

  try_getArrayIndex(
    data: Bytes,
    inputNum: i32,
    arrayIndex: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getArrayIndex",
      "getArrayIndex(bytes,uint8,uint8):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(arrayIndex))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getArrayLast(data: Bytes, inputNum: i32): Bytes {
    let result = super.call(
      "getArrayLast",
      "getArrayLast(bytes,uint8):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
      ]
    );

    return result[0].toBytes();
  }

  try_getArrayLast(data: Bytes, inputNum: i32): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getArrayLast",
      "getArrayLast(bytes,uint8):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getArrayLength(data: Bytes, inputNum: i32): BigInt {
    let result = super.call(
      "getArrayLength",
      "getArrayLength(bytes,uint8):(uint256)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
      ]
    );

    return result[0].toBigInt();
  }

  try_getArrayLength(data: Bytes, inputNum: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getArrayLength",
      "getArrayLength(bytes,uint8):(uint256)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBytes(data: Bytes, inputNum: i32, offset: BigInt): Bytes {
    let result = super.call(
      "getBytes",
      "getBytes(bytes,uint8,uint256):(bytes)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum)),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );

    return result[0].toBytes();
  }

  try_getBytes(
    data: Bytes,
    inputNum: i32,
    offset: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getBytes",
      "getBytes(bytes,uint8,uint256):(bytes)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum)),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInput(data: Bytes, inputNum: i32): Bytes {
    let result = super.call("getInput", "getInput(bytes,uint8):(bytes32)", [
      ethereum.Value.fromBytes(data),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
    ]);

    return result[0].toBytes();
  }

  try_getInput(data: Bytes, inputNum: i32): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getInput", "getInput(bytes,uint8):(bytes32)", [
      ethereum.Value.fromBytes(data),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(inputNum))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getMethod(data: Bytes): Bytes {
    let result = super.call("getMethod", "getMethod(bytes):(bytes4)", [
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBytes();
  }

  try_getMethod(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getMethod", "getMethod(bytes):(bytes4)", [
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getParams(data: Bytes): Bytes {
    let result = super.call("getParams", "getParams(bytes):(bytes)", [
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBytes();
  }

  try_getParams(data: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getParams", "getParams(bytes):(bytes)", [
      ethereum.Value.fromBytes(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  read32(data: Bytes, offset: BigInt, length: BigInt): Bytes {
    let result = super.call(
      "read32",
      "read32(bytes,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );

    return result[0].toBytes();
  }

  try_read32(
    data: Bytes,
    offset: BigInt,
    length: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "read32",
      "read32(bytes,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  read4left(data: Bytes, offset: BigInt): Bytes {
    let result = super.call("read4left", "read4left(bytes,uint256):(bytes4)", [
      ethereum.Value.fromBytes(data),
      ethereum.Value.fromUnsignedBigInt(offset)
    ]);

    return result[0].toBytes();
  }

  try_read4left(data: Bytes, offset: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "read4left",
      "read4left(bytes,uint256):(bytes4)",
      [
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  slippageLimitDenominator(): BigInt {
    let result = super.call(
      "slippageLimitDenominator",
      "slippageLimitDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_slippageLimitDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slippageLimitDenominator",
      "slippageLimitDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slippageLimitNumerator(): BigInt {
    let result = super.call(
      "slippageLimitNumerator",
      "slippageLimitNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_slippageLimitNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slippageLimitNumerator",
      "slippageLimitNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  txGuard(
    _poolManagerLogic: Address,
    to: Address,
    data: Bytes
  ): BalancerV2Guard__txGuardResult {
    let result = super.call(
      "txGuard",
      "txGuard(address,address,bytes):(uint16,bool)",
      [
        ethereum.Value.fromAddress(_poolManagerLogic),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new BalancerV2Guard__txGuardResult(
      result[0].toI32(),
      result[1].toBoolean()
    );
  }

  try_txGuard(
    _poolManagerLogic: Address,
    to: Address,
    data: Bytes
  ): ethereum.CallResult<BalancerV2Guard__txGuardResult> {
    let result = super.tryCall(
      "txGuard",
      "txGuard(address,address,bytes):(uint16,bool)",
      [
        ethereum.Value.fromAddress(_poolManagerLogic),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BalancerV2Guard__txGuardResult(value[0].toI32(), value[1].toBoolean())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _slippageLimitNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slippageLimitDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSlippageLimitCall extends ethereum.Call {
  get inputs(): SetSlippageLimitCall__Inputs {
    return new SetSlippageLimitCall__Inputs(this);
  }

  get outputs(): SetSlippageLimitCall__Outputs {
    return new SetSlippageLimitCall__Outputs(this);
  }
}

export class SetSlippageLimitCall__Inputs {
  _call: SetSlippageLimitCall;

  constructor(call: SetSlippageLimitCall) {
    this._call = call;
  }

  get _slippageLimitNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slippageLimitDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSlippageLimitCall__Outputs {
  _call: SetSlippageLimitCall;

  constructor(call: SetSlippageLimitCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TxGuardCall extends ethereum.Call {
  get inputs(): TxGuardCall__Inputs {
    return new TxGuardCall__Inputs(this);
  }

  get outputs(): TxGuardCall__Outputs {
    return new TxGuardCall__Outputs(this);
  }
}

export class TxGuardCall__Inputs {
  _call: TxGuardCall;

  constructor(call: TxGuardCall) {
    this._call = call;
  }

  get _poolManagerLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TxGuardCall__Outputs {
  _call: TxGuardCall;

  constructor(call: TxGuardCall) {
    this._call = call;
  }

  get txType(): i32 {
    return this._call.outputValues[0].value.toI32();
  }

  get value1(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}
