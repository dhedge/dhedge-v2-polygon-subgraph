type DaoAddressSet @entity {
  id: ID!
  daoAddress: Bytes!
}

type DaoFeeSet @entity {
  id: ID!
  numerator: BigInt!
  denominator: BigInt!
}

type ExitCooldownSet @entity {
  id: ID!
  cooldown: BigInt!
}

type ExitFeeSet @entity {
  id: ID!
  numerator: BigInt!
  denominator: BigInt!
}

type FundCreated @entity {
  id: ID!
  fundAddress: Bytes!
  isPoolPrivate: Boolean!
  fundName: String!
  managerName: String!
  manager: Bytes!
  time: BigInt!
  managerFeeNumerator: BigInt!
  managerFeeDenominator: BigInt!
  uniqueManager: Manager!
}

type LogUpgrade @entity {
  id: ID!
  manager: Bytes!
  pool: Bytes!
}

type MaximumSupportedAssetCountSet @entity {
  id: ID!
  count: BigInt!
}

type OwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes!
  newOwner: Bytes!
}

type Paused @entity {
  id: ID!
  account: Bytes!
}

type ProxyCreated @entity {
  id: ID!
  proxy: Bytes!
}

type SetManagerFeeNumeratorChangeDelay @entity {
  id: ID!
  delay: BigInt! # uint256
}

type SetAssetHandler @entity {
  id: ID!
  assetHandler: Bytes! # address
}

type SetMaximumManagerFee @entity {
  id: ID!
  numerator: BigInt! # uint256
  denominator: BigInt! # uint256
}

type SetMaximumManagerFeeNumeratorChange @entity {
  id: ID!
  amount: BigInt! # uint256
}

type SetPoolManagerFee @entity {
  id: ID!
  numerator: BigInt! # uint256
  denominator: BigInt! # uint256
}

type SetPoolStorageVersion @entity {
  id: ID!
  poolStorageVersion: BigInt! # uint256
}

type Unpaused @entity {
  id: ID!
  account: Bytes!
}

type Approval @entity {
  id: ID!
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
}

type Deposit @entity {
  id: ID!
  fundAddress: Bytes!
  investor: Bytes!
  assetDeposited: Bytes!
  valueDeposited: BigInt!
  fundTokensReceived: BigInt!
  totalInvestorFundTokens: BigInt!
  fundValue: BigInt!
  totalSupply: BigDecimal!
  time: BigInt!
  blockNumber: Int!
  poolName: String!
  managerName: String!
  manager: Bytes
  pool: Pool!
  uniqueInvestor: Investor!
}

type ManagerFeeMinted @entity {
  id: ID!
  pool: Bytes!
  manager: Bytes!
  available: BigInt!
  daoFee: BigInt!
  managerFee: BigInt!
  tokenPriceAtLastFeeMint: BigInt!
  block: Int!
}

type PoolManagerLogicSet @entity {
  id: ID!
  poolManagerLogic: Bytes!
  from: Bytes!
}

type PoolPrivacyUpdated @entity {
  id: ID!
  isPoolPrivate: Boolean!
}

type TransactionExecuted @entity {
  id: ID!
  pool: Bytes!
  manager: Bytes!
  transactionType: Int!
  time: BigInt!
  poolName: String!
  managerName: String!
}

type Transfer @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  value: BigInt!
}

type Withdrawal @entity {
  id: ID!
  fundAddress: Bytes!
  investor: Bytes!
  valueWithdrawn: BigInt!
  fundTokensWithdrawn: BigInt!
  totalInvestorFundTokens: BigInt!
  fundValue: BigInt!
  totalSupply: BigDecimal!
  time: BigInt!
  block: Int!
  poolName: String!
  managerName: String!
  pool: Pool!
  assetsWithdrawn: [AssetsWithdrawn!]! @derivedFrom(field: "withdrawal")
  uniqueInvestor: Investor!
}

type AssetsWithdrawn @entity {
  id: ID!
  asset: Bytes!
  name: String!
  amount: BigDecimal!
  withdrawProcessed: Boolean!
  withdrawal: Withdrawal!
}

type Exchange @entity {
  id: ID!
  fundAddress: Bytes!
  sourceAsset: Bytes!
  sourceAmount: BigInt!
  dstAsset: Bytes!
  time: BigInt!
  pool: Pool!
}

type Pool @entity {
  id: ID!
  fundAddress: Bytes!
  name: String!
  manager: Bytes # optional
  managerName: String!
  totalSupply: BigDecimal!
  decimals: BigInt # optional
  deposits: [Deposit!]! @derivedFrom(field: "pool")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "pool")
  exchanges: [Exchange!]! @derivedFrom(field: "pool")
  assets: [Asset!]! @derivedFrom(field: "pool")
  tokenPrice: BigInt! # uint256
}

type Asset @entity {
  id: ID!
  pool: Pool!
  time: Int!
  block: Int!
  name: String!
  balance: BigDecimal!
  decimals: BigInt!
  # value: BigInt! # cant use in Exchange entity..
}

type AddLiquidity @entity {
  id: ID!
  fundAddress: Bytes!
  tokenA: Bytes!
  tokenB: Bytes!
  pair: Bytes!
  amountADesired: BigInt!
  amountBDesired: BigInt!
  amountAMin: BigInt!
  amountBMin: BigInt!
  time: BigInt!
  block: Int!
  pool: Pool!
}

type RemoveLiquidity @entity {
  id: ID!
  fundAddress: Bytes!
  tokenA: Bytes!
  tokenB: Bytes!
  pair: Bytes!
  liquidity: BigInt!
  amountAMin: BigInt!
  amountBMin: BigInt!
  time: BigInt!
  block: Int!
}

type Stake @entity {
  id: ID!
  fundAddress: Bytes!
  asset: Bytes!
  stakingContract: Bytes!
  amount: BigInt!
  time: Int!
}

type Unstake @entity {
  id: ID!
  fundAddress: Bytes!
  asset: Bytes!
  stakingContract: Bytes!
  amount: BigInt!
  time: Int!
}

type Claim @entity {
  id: ID!
  fundAddress: Bytes!
  stakingContract: Bytes!
  time: Int!
}

type Investor @entity {
  id: ID!
  investorAddress: Bytes! # address
  deposits: [Deposit!]! @derivedFrom(field: "uniqueInvestor")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "uniqueInvestor")
}

type Manager @entity {
  id: ID!
  managerAddress: Bytes! # address
  fundCreated: [FundCreated!]! @derivedFrom(field: "uniqueManager")
}

type ExchangeFrom @entity {
  id: ID!
  fundAddress: Bytes!
  sourceAsset: Bytes!
  sourceAmount: BigInt! # uint256
  dstAsset: Bytes!
  time: BigInt!
}

type ExchangeTo @entity {
  id: ID!
  fundAddress: Bytes!
  sourceAsset: Bytes!
  dstAsset: Bytes!
  dstAmount: BigInt! # uint256
  time: BigInt!
}

type JoinPool @entity {
  id: ID!
  fundAddress: Bytes!
  poolId: Bytes! # bytes32?
  assets: [Bytes!]!
  # maxAmountsIn: [Bytes!]!
  time: BigInt!
}

type ExitPool @entity {
  id: ID!
  fundAddress: Bytes!
  poolId: Bytes! # bytes32?
  assets: [Bytes!]!
  # minAmountsOut: [Bytes!]!
  time: BigInt!
}
